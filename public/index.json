[{"categories":["System Administration"],"content":"How to configure Squid proxy with basic authentication","date":"2025-03-09","objectID":"/2025-03-09-squid-proxy-basic-auth-configuration/","tags":["howto","squid","proxy","auth"],"title":"Squid Proxy Basic Auth Configuration","uri":"/2025-03-09-squid-proxy-basic-auth-configuration/"},{"categories":["System Administration"],"content":"This quick and straightforward how-to is the one I would have loved to have found while I was setting up Squid proxy for a production application. Squid is a caching proxy for the Web supporting HTTP, HTTPS, FTP, and more. It reduces bandwidth and improves response times by caching and reusing frequently-requested web pages. I wanted to restrict access to the proxy to only authenticated users. Here‚Äôs how I did it. ","date":"2025-03-09","objectID":"/2025-03-09-squid-proxy-basic-auth-configuration/:0:0","tags":["howto","squid","proxy","auth"],"title":"Squid Proxy Basic Auth Configuration","uri":"/2025-03-09-squid-proxy-basic-auth-configuration/"},{"categories":["System Administration"],"content":"Create the htpasswd file The first step is to create the htpasswd file. htpasswd -c /etc/squid/passwd username This will prompt for a password. ","date":"2025-03-09","objectID":"/2025-03-09-squid-proxy-basic-auth-configuration/:1:0","tags":["howto","squid","proxy","auth"],"title":"Squid Proxy Basic Auth Configuration","uri":"/2025-03-09-squid-proxy-basic-auth-configuration/"},{"categories":["System Administration"],"content":"Make sure Squid can read the htpasswd file Without this, Squid will not be able to read the file and fail silently when trying to authenticate. chmod 644 /etc/squid/passwd ","date":"2025-03-09","objectID":"/2025-03-09-squid-proxy-basic-auth-configuration/:2:0","tags":["howto","squid","proxy","auth"],"title":"Squid Proxy Basic Auth Configuration","uri":"/2025-03-09-squid-proxy-basic-auth-configuration/"},{"categories":["System Administration"],"content":"Verify the authentication Run the following command to verify the authentication against squid‚Äôs basic_ncsa_auth tool: echo \"username password\" | /usr/lib/squid/basic_ncsa_auth /etc/squid/passwd ","date":"2025-03-09","objectID":"/2025-03-09-squid-proxy-basic-auth-configuration/:3:0","tags":["howto","squid","proxy","auth"],"title":"Squid Proxy Basic Auth Configuration","uri":"/2025-03-09-squid-proxy-basic-auth-configuration/"},{"categories":["System Administration"],"content":"Squid configuration Add the following to your Squid configuration file: # /etc/squid/squid.conf ... # Authentication settings auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwd auth_param basic realm proxy auth_param basic credentialsttl 2 hours auth_param basic casesensitive off # Define ACL for authenticated users acl authenticated_users proxy_auth REQUIRED # Allow authenticated users to access the web http_access allow authenticated_users # And finally deny all other access to this proxy http_access deny all ... Ensure that http_access allow authenticated_users is the last allow rule in the file. Verify the squid configuration is correct with: squid -k parse And restart Squid: systemctl restart squid ","date":"2025-03-09","objectID":"/2025-03-09-squid-proxy-basic-auth-configuration/:4:0","tags":["howto","squid","proxy","auth"],"title":"Squid Proxy Basic Auth Configuration","uri":"/2025-03-09-squid-proxy-basic-auth-configuration/"},{"categories":["System Administration"],"content":"Check if it actually works From your local machine (meaning not the machine that is running the Squid proxy), try to access a website through the proxy with authentication: curl -x http://username:password@squid-proxy-host:3128 http://example.com Make sure you try to use the proxy without authentication as well, to make sure we get an access denied error. curl -x http://squid-proxy-host:3128 http://example.com ","date":"2025-03-09","objectID":"/2025-03-09-squid-proxy-basic-auth-configuration/:5:0","tags":["howto","squid","proxy","auth"],"title":"Squid Proxy Basic Auth Configuration","uri":"/2025-03-09-squid-proxy-basic-auth-configuration/"},{"categories":["System Administration"],"content":"Check the logs Use the following command to check the logs: tail -f /var/log/squid/access.log You should see logs like this: 1741610861.934 25047 10.135.50.227 TCP_TUNNEL/200 21623 CONNECT example.com:443 username HIER_DIRECT/5.226.179.10 - 1741610861.937 22061 10.135.50.227 TCP_TUNNEL/200 21530 CONNECT example.com:443 username HIER_DIRECT/5.226.179.10 - 1741610861.939 6654 10.135.50.227 TCP_TUNNEL/200 22589 CONNECT example.com:443 username HIER_DIRECT/5.226.179.10 - 1741610861.940 60714 10.135.50.224 TCP_TUNNEL/200 21579 CONNECT example.com:443 username HIER_DIRECT/5.226.179.10 - TCP_TUNNEL/200 indicates the requests are redirected correctly. ","date":"2025-03-09","objectID":"/2025-03-09-squid-proxy-basic-auth-configuration/:6:0","tags":["howto","squid","proxy","auth"],"title":"Squid Proxy Basic Auth Configuration","uri":"/2025-03-09-squid-proxy-basic-auth-configuration/"},{"categories":["System Administration"],"content":"Troubleshooting If you get TCP_DENIED/40* in the logs, it means something is wrong with the authentication mechanism, for example: 1741608951.396 3 10.135.50.230 TCP_DENIED/407 4016 CONNECT example.com:443 username HIER_NONE/- text/html In this case, the request was denied because the user was not authenticated to the proxy. ","date":"2025-03-09","objectID":"/2025-03-09-squid-proxy-basic-auth-configuration/:7:0","tags":["howto","squid","proxy","auth"],"title":"Squid Proxy Basic Auth Configuration","uri":"/2025-03-09-squid-proxy-basic-auth-configuration/"},{"categories":null,"content":"experiences","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"When I started my career in software, I‚Äôve always wondered when I would finally be a ‚Äúsenior‚Äù engineer. Is it a matter of years of experience? Does it just happen suddenly? After a few years on the job, I can tell that the answer is not so straightforward. a senior engineer from google ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:0:0","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"A little background about me I‚Äôm a self-taught programmer, and never had formal education in Computer Science or anything like that. After getting my high school diploma, I jumped straight into more of a Linux/Windows systems administrator role, which I‚Äôve stuck with for a really long time. I didn‚Äôt begin my software career until I was 35 years old, and all of my knowledge came from experience building and breaking things, reading books, taking courses, and working with some really amazing mentors. In 2019, I wrote an article about the things I learned in my first year as a software engineer. Since then, I‚Äôve worked in various roles as a consultant and full-time employee. Some titles I‚Äôve been given include ‚ÄúDevOps Engineer‚Äù, ‚ÄúSite Reliability Engineer‚Äù, and ‚ÄúBackend Developer‚Äù. Along the way, I noticed that the ‚ÄúJunior‚Äù part of my job title gradually disappeared, and my salary increased accordingly. But does that make me a senior engineer after just five years? The answer for me is both yes and no üòÖ ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:1:0","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"Yes I currently hold a ‚ÄúSenior Software Engineer‚Äù position at a marketing company in Europe. This title is clearly stated in my work contract, and my responsibilities include training and mentoring my colleagues, participating in software and infrastructure architecture discussions with stakeholders and managers, and contributing to the codebase and operational management of around 20 in-house applications. My colleagues seek guidance from me, my managers and mentors are happy with my input, and I am expected to make significant contributions and drive decisions. That means yes, right? ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:2:0","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"No On the other hand, being a senior engineer requires more than just a job title or a certain number of years of experience. It‚Äôs more about having a deep understanding of the technology stack, making informed decisions, and being a mentor to others. Despite my title, salary, and responsibilities, I still don‚Äôt quite feel like a senior engineer. Imposter syndrome is a constant battle for me, and I often second-guess myself when faced with challenging tasks. Coping with imposter syndrome is challenging, but I am fortunate to have a supportive community of engineers at work and mentors outside of work who I admire and learn from. I used to really believe that imposter syndrome would eventually fade, but I now accept that it may be a daily struggle. Infact, a senior co-worker and friend of mine, who has been programming for over 25 years, shared with me that they still experience it from time to time. Despite my occasional self-doubt, I am still trusted to solve complex problems and mentor others. how I feel all the time ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:3:0","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"So which one is it? In short, while I feel like a senior engineer on some days, there are many times when I feel like a junior, still cutting my teeth and struggling with the smallest of issues. But you know what? That‚Äôs ok. üòÉ It‚Äôs part of the process, and I have learned to more or less accept it. ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:4:0","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"Some advice I would give to my junior self if I could ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:5:0","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"Never stop learning As a junior engineer, it‚Äôs important to be curious and always seek out new knowledge. This means staying up-to-date with the latest technologies, frameworks, and best practices in your field. Attend conferences, read blogs, and participate in online forums to keep your knowledge fresh and expand your skillset. ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:5:1","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"Ask stupid questions Don‚Äôt be afraid to ask questions, even if they seem silly or basic. Asking questions is a great way to learn and clarify your understanding of a topic. Your team members are there to support you, and they will likely be happy to answer your questions. ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:5:2","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"Get excellent at using your tools The tools you use as an engineer are critical to your success, so it‚Äôs important to become proficient in using them. Whether it‚Äôs an IDE, a version control system, a cloud platform, or a cli application, take the time to learn how to use them effectively. This will help you be more productive and efficient in your everyday work. ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:5:3","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"Fail fast and don‚Äôt be afraid to make mistakes As a junior engineer, you are bound to make mistakes. As a matter of fact, mistakes will be made as a senior engineer too. Don‚Äôt let the fear of failure hold you back from taking risks and trying new things. Embrace failure as a learning opportunity and use it to improve your skills and knowledge. ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:5:4","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"Have fun \u0026 play Engineering is a challenging and rewarding field, but it‚Äôs also important to have fun and enjoy your work. Take the time to experiment, play around with new technologies, and work on personal projects that interest you. This will help in staying motivated and inspired in your work. ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:5:5","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"TL;DR I‚Äôm hoping this post will help some of the newer engineers out there to have a little peek of what‚Äôs to come. Being a senior engineer is not just about a job title or number of years of experience. It‚Äôs about constantly learning, growing, and helping others along the way. ","date":"2023-03-26","objectID":"/2023-03-26-am-i-a-senior-engineer-yet/:6:0","tags":["experience","career","growth","development","dev","senior","junior"],"title":"I've been programming full time for the past 5 years. Am I a senior engineer yet?","uri":"/2023-03-26-am-i-a-senior-engineer-yet/"},{"categories":null,"content":"Premise A few months ago I worked with a company which provided fully functional backend for online multiplayer games. As part of their product portfolio, they provided their customers with a cli utility, called ds-uploader (dedicated server uploader). Written in Go, this CLI helped the customer: Process all files and assets in a directory of their choice containing their game server. Synchronize each file to a remote object storage bucket (meaning to upload only files that are new or modified). From those uploaded files, build a container image. Pass that container image to another service, which would then be responsible to run it. Most of the implementation details involved calling different services, both belonging to the service provider, and to the cloud provider of choice (in this case, AWS). These details were mostly hidden from the end user; in fact all they really needed to worry about, was to run the application and point it to the directory with their game server files, along with a few other options. $ ds-uploader sync --path /path/to/game/server/ ... \u003cmore flags here\u003e ","date":"2023-03-20","objectID":"/2023-03-20-go-concurrency/:1:0","tags":["go"],"title":"Speeding up a Go cli application with concurrency","uri":"/2023-03-20-go-concurrency/"},{"categories":null,"content":"The Problem The client mentioned that in some cases, the ds-uploader would take a long time to run end to end. In particular, the part of the application dealing with the file uploads would take a very long time, whether the files were new or to be modified. Upon testing, we found that this mostly happened with game server directories with multiple thousands of files, distributed across multiple levels of nested directories. In the client‚Äôs case, where they had a game server directory of more than 2000 files, nested across at least 5 levels of directories, for a total of around 4GB, the ds-uploader would spend more than 6 hours to complete. ","date":"2023-03-20","objectID":"/2023-03-20-go-concurrency/:2:0","tags":["go"],"title":"Speeding up a Go cli application with concurrency","uri":"/2023-03-20-go-concurrency/"},{"categories":null,"content":"Show me the code! ","date":"2023-03-20","objectID":"/2023-03-20-go-concurrency/:3:0","tags":["go"],"title":"Speeding up a Go cli application with concurrency","uri":"/2023-03-20-go-concurrency/"},{"categories":null,"content":"Before In the application, we used an interface exposed by the cloud provider‚Äôs API. // BatchUploadIterator is an interface that uses the scanner pattern to // iterate through what needs to be uploaded. type BatchUploadIterator interface { Next() bool Err() error UploadObject() BatchUploadObject } By creating a custom type satisfying such an interface, we could basically let the cloud provider‚Äôs API do all the heavy lifting for us, by leveraging an Uploader type providing an UploadWithIterator method. type Uploader struct { // A few exported fields } func (u Uploader) UploadWithIterator( ctx context.Context, iter BatchUploadIterator, opts ...func(*Uploader)) error {} So we decided to do exactly that and wrote our own BatchUploadIterator, which roughly looks like this. // Custom FileIterator type FileIterator struct { BucketName string FileInfos []FileInfo err error Size int64 } func NewFileIterator(directoryPath string, auth *session.Session) *FileIterator { // Traverse the entire directory structure // and save metadata from each file if it is not a directory. } func (iterator *FileIterator) Next() bool { // return whether or not we are at the end of the list of files to upload. } func (iterator *FileIterator) Err() error { // return any error } func (iterator *FileIterator) UploadObject() BatchUploadObject { // return a single UploadObject representing the file we want to upload } Next we passed this iterator to AWS API‚Äôs UploadWithIterator, and called it a day. With smaller directories, this worked without issues, and upload times were acceptable. With larger, nested directories we started seeing slower speeds. This is what UploadWithIterator looks like: func (u Uploader) UploadWithIterator( ctx context.Context, iter BatchUploadIterator, opts ...func(*Uploader)) error { var errs []Error for iter.Next() { // Get the object from our custom iterator object := iter.UploadObject() // Attempt to upload the object if _, err := u.UploadWithContext(ctx, object.Object, opts...); err != nil { errs = append(errs, err) } // omitted code } if len(errs) \u003e 0 { // handle the errors } return nil } As we can see, the method iterates through the list of objects sequentially, and calls u.UploadWithContext for each, which is where the upload happens under the hood. The problem is that with this approach, the program actually waits until a file has been uploaded with success or not, before moving on to the next. ","date":"2023-03-20","objectID":"/2023-03-20-go-concurrency/:3:1","tags":["go"],"title":"Speeding up a Go cli application with concurrency","uri":"/2023-03-20-go-concurrency/"},{"categories":null,"content":"After This problem is a great candidate for solving with Go‚Äôs concurrency features. We have some I/O operation, on different objects which are not dependant on each other, that can be uploaded in no particular order. We know from the API documentation that UploadWithContext is safe to be called across multiple goroutines. The API doesn‚Äôt natively provide methods for concurrent uploads, so we decided to extend the Uploader type with a custom type: // ConcurrentUploader wraps an Uploader and extends its capabilities. type ConcurrentUploader struct { uploader Uploader } func NewConcurrentUploader(uploader Uploader) ConcurrentUploader { return ConcurrentUploader{ uploader: uploader, } } Such a type will still call Uploader.UploadWithContext, but from our own version of UploadWithIterator, which we also rename for good measure. Here it is, with comments at each step to help understand what it does func (cu ConcurrentUploader) UploadConcurrentlyWithIterator( ctx aws.Context, iter s3manager.BatchUploadIterator) error { var errs []error // We use a waitgroup because we plan to have several goroutines, the number of which // is determined by the concurrency value, uploading the processed objects in batches var wg sync.WaitGroup var concurrency = 10 objects := make(chan BatchUploadObject, concurrency) errors := make(chan error, concurrency) // Spawn a number of concurrent upload workers equal to the concurrency value. for w := 0; w \u003c concurrency; w++ { go cu.uploadWorker(ctx, \u0026wg, objects, errors) wg.Add(1) } // In a separate goroutine, start iterating through the FileIterator. // This contains metadata of all dedicated server files, and is responsible for // creating an Upload Object for the API to consume. // Send all found upload objects to the objects channel. // When we're done, meaning we sent all the objects, we close the channel. go func() { for iter.Next() { object := iter.UploadObject() objects \u003c- object } close(objects) }() // In a separate goroutine, gather all errors from the errors channel go func() { for err := range errors { errs = append(errs, err) } }() // Wait for all the uploadWorkers to be done working, // and then close the errors channel. wg.Wait() close(errors) if len(errs) \u003e 0 { // handle the errors } return nil } Lastly, we have the uploadWorker that looks like this: // uploadWorker takes care to process each object and errors if any. func (cu ConcurrentUploader) uploadWorker( ctx context.Context, wg *sync.WaitGroup, objects \u003c-chan BatchUploadObject, errors chan\u003c- error) { defer wg.Done() // receive objects from the objects channel for o := range objects { // upload the object (see below) err := cu.uploadObject(ctx, o) if err != nil { errors \u003c- err } } } // uploadObject simply calls the Uploader's UploadWithContext. func (cu ConcurrentUploader) uploadObject( ctx context.Context, object BatchUploadObject) error { err := cu.uploader.UploadWithContext(ctx, object.Object) if err != nil { return err } if object.After == nil { return nil } err = object.After() if err != nil { return err } return nil } ","date":"2023-03-20","objectID":"/2023-03-20-go-concurrency/:3:2","tags":["go"],"title":"Speeding up a Go cli application with concurrency","uri":"/2023-03-20-go-concurrency/"},{"categories":null,"content":"Conclusion We kept using our custom FileIterator and the API‚Äôs UploadWithContext method. This allowed us to use what was already there and not refactor too much. We however did so while applying a relatively basic concurrency pattern based on a worker pool and waitgroup. Workers run concurrently, and process the objects (files) to upload in batches As a result, the upload of the client‚Äôs game server (which I repeat, was a nested directory of more than 2000 files, for a total of around 4GB ) went from 6 hours to a much better 30 minutes end to end. ","date":"2023-03-20","objectID":"/2023-03-20-go-concurrency/:4:0","tags":["go"],"title":"Speeding up a Go cli application with concurrency","uri":"/2023-03-20-go-concurrency/"},{"categories":null,"content":"Tackling the last (and arguably hardest) Kubernetes certification, for fun and for profit","date":"2022-03-20","objectID":"/2022-03-20-cks-experience/","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing Certified Kubernetes Security Specialist (CKS) exam","uri":"/2022-03-20-cks-experience/"},{"categories":null,"content":"Earlier in 2021, right after taking the exams for CKA and CKAD in succession (the experience of which I documented here), I quickly booked the brand-new (at least at the time) CKS exam. Life happened, and I‚Äôve ended up procrastinating the study and preparation process until now üòÖ. Today I got the great news of a PASS, and once again I would like to share my experience in obtaining this tough certification. ","date":"2022-03-20","objectID":"/2022-03-20-cks-experience/:0:0","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing Certified Kubernetes Security Specialist (CKS) exam","uri":"/2022-03-20-cks-experience/"},{"categories":null,"content":"Preparation I‚Äôve used a similar preparation process as the previous two certs. I first went through Kodekloud‚Äôs CKS course with labs; this course has a great mix of theory (short videos, not more than 15~ minutes long), and practice (actual lab scenarios in browser terminal). I found this to be an easier introduction to the topics. It also has few mock exams to test your knowledge at the end. I essentially spent around 3-4 weeks going through all the content and labs, and ensuring to have a good understanding of each topic. I then proceeded to drill the mock exams and do them again and again for about a week or so, until I could do them with my eyes closed üòÄ. After this, I switched to Killer.sh Kubernetes CKS 2022 Complete Course on udemy. I made sure to go through all the labs, and revisit any topic that needed refreshing. Killer.sh‚Äôs approach is more thorough than Kodekloud‚Äôs. Explanations are more in depth, and the trainer likes to show different ways to accomplish tasks, for a better learning experience. The labs are also harder/trickier. Once I felt comfortable with my knowledge from these two courses, I signed up on Killer.sh CKS exam simulator. This gives access to 2 36-hour sessions on the Killer.sh platform, where there are about 25 hard scenarios that are extremely similar to real exam scenarios. Thorough solutions and scores are provided at the end of a two-hour timer. The environment and timer can be reset as much as you want during the 36 hour time window, giving room to experimentation and more learning experience. In my first couple tries with the Killer.sh simulator, I got completely and utterly destroyed, and quite honestly, a little bit depressed üòÖ; But attempting the whole series of questions again and again in as little time as possible, slowly built my confidence as my score kept getting better. I did both simulator sessions during the week before the actual exam, while also still revisiting the Kodekloud mock exams, to keep that practice up. Overall, the preparation effort for this exam equalled to dedicated study + practice for a couple hours every day for about a month and a half, with the last week being a little bit more intense focusing on simulators. ","date":"2022-03-20","objectID":"/2022-03-20-cks-experience/:0:1","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing Certified Kubernetes Security Specialist (CKS) exam","uri":"/2022-03-20-cks-experience/"},{"categories":null,"content":"The Exam I had an issue during pre-exam checks with the proctor; I was using Chrome and I wasn‚Äôt able to share with them the view of my monitors: there was something wrong with the Chrome plugin. The proctor suggested to use Microsoft Edge to connect to the session, so I spent about 10 panicked minutes downloading the app, configuring my bookmarks on it, and ensuring the exam plugin worked. Luckily it did, and I was able to start about 15 minutes after the actual start time. The exam itself consisted of about 16 complex scenarios to be completed in 2 hours. The pass mark is 67/100, and partial attempts count towards the final score. Even though the questions are in my experience less than the ones in previous two certification exams, the available time is barely enough to complete all of them. I knew this beforehand, so I went ahead and tackled first all the questions with higher score, flagging the easier ones for later. After 1 hour and a half, I was left with 3 flagged scenarios which I had attempted, but wasn‚Äôt sure about. One of them was one of the high score ones, and I spent the last 30 minutes trying to figure out the issue without much success. I ended the exam at the very last minute, my confidence not being very high; I had a gut feeling that I would need to use my retake attempt, because according to my calculations adding up the various question scores, the total I had barely made the passing mark. Exactly 24 hours after the exam ended, I got my certificate and exam score of 81/100, which was quite surprising, but very satisfying üòÄ. ","date":"2022-03-20","objectID":"/2022-03-20-cks-experience/:0:2","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing Certified Kubernetes Security Specialist (CKS) exam","uri":"/2022-03-20-cks-experience/"},{"categories":null,"content":"Tips Here‚Äôs a few tips I can think of, in no particular order, to get ready for sitting for the exam: Know imperative commands with kubectl like the back of your hand. Get comfortable looking things up on kubernetes.io. Build a bookmark folder in your browser of choice with relevant pages. For this exam, you are allowed to browse online documentation for other relevant tools, like Trivy or Falco. Be sure to read your candidate handbook for a complete list. You do not need to learn rego language by heart, but being able to read it to solve some of the Open Policy Agent questions will help you a lot. Prepare Chrome, Microsoft Edge and Vivaldi web browsers with the PSI exam plugin, complete with bookmarks, before exam day; just in case you have last minute browser glitches like I had. Make sure you really understand how to use sysdig and falco, in case you need to create new alert rules for container syscall activity from scratch. Attempt all questions; correct partial tasks count towards the final score! Practice, practice and practice more; build that muscle memory üòÄ ","date":"2022-03-20","objectID":"/2022-03-20-cks-experience/:0:3","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing Certified Kubernetes Security Specialist (CKS) exam","uri":"/2022-03-20-cks-experience/"},{"categories":null,"content":"Resources used Official docs kubernetes.io Kodekloud‚Äôs CKS course with labs Killer.sh Kubernetes CKS 2022 Complete Course Killer.sh CKS exam simulator Kodekloud community slack Killer.sh community slack ","date":"2022-03-20","objectID":"/2022-03-20-cks-experience/:0:4","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing Certified Kubernetes Security Specialist (CKS) exam","uri":"/2022-03-20-cks-experience/"},{"categories":null,"content":"Extra reading Container Security, by Liz Rice. Not a must-read, but an excellent one especially if you enjoy the topics covered in the courses. ","date":"2022-03-20","objectID":"/2022-03-20-cks-experience/:0:5","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing Certified Kubernetes Security Specialist (CKS) exam","uri":"/2022-03-20-cks-experience/"},{"categories":null,"content":"Conclusion The CKS exam is definitely the hardest one I‚Äôve tackled so far, and the final one in the trio. As for the other certifications in the series, it is tough, but fair; definitely achieavable with a good study plan and resources, and especially enough discipline to follow through üòÄ. ","date":"2022-03-20","objectID":"/2022-03-20-cks-experience/:1:0","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing Certified Kubernetes Security Specialist (CKS) exam","uri":"/2022-03-20-cks-experience/"},{"categories":null,"content":"Obtaining both Kubernetes certifications for fun and for profit","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"In December last year I was able to sit for the coveted Certified Kubernetes Administrator and Certified Kubernetes Application Developer exams, and clear them both after some preparation. This post is meant to share my exam experience, and all the materials used. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:0:0","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"TL;DR Read the exam questions carefully. Know imperative commands with kubectl like the back of your hand. Get comfortable looking things up on kubernetes.io. Build a bookmark folder in Chrome with relevant pages in kubernetes.io: you can use it during the exam! Seriously, read the damn questions carefully. Practice, practice and practice more. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:0:1","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"The exams The exam for any of these Kubernetes certifications consists in solving a set of tasks, in a 2 hour terminal session. There are 17 scenarios/questions for CKA, and 19 for CKAD. The whole time, a proctor is watching and listening to you via webcam and microphone, and seeing the content of your screens (you can use more than one). You communicate with the proctor only via a live chat application which is part of the PSI interface for the exam. At the beginning they will ask you to show your ID, and then you will need to show them your working area from the webcam. You will need to show your desk, and the room you‚Äôre in. Ensure that nothing written is visibile on the walls, and that you are the only person in the room. Once the exam starts, the proctor may ask you every once in a while to show your hands to the webcam. Don‚Äôt bother asking questions about the exam itself, chances are the proctor really doesn‚Äôt know about the subject and is only there to ensure you don‚Äôt cheat. You will need to share your screens for the proctor to see. If you have 2 screens you can have the exam terminal on one, and the tab with k8s docs on the other. In the terminal itself, you are given 6 or so k8s clusters, and you will need to switch between them. You will always have a command printed at the beginning of each question, for easy copy paste: kubectl config use-context bla Make sure to use it! Do not be fooled by the fact that you are able to search documentation during the exam. The tasks that you will be given are often complex ones; time is of the essence! If you waste it while reading up docs you will not be able to complete all of the tasks in time. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:0:2","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"Resources used Official docs kubernetes.io Certified Kubernetes Administrator by Mumshad Mannambeth (Udemy) Certified Kubernetes Application Developer by Mumshad Mannambeth (Udemy) Exam simulator killer.sh Kodekloud community slack Kubernetes community slack ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:0:3","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"Extra reading Cloud Native Devops with Kubernetes, by John Arundel and Justin Domingus. Kubernetes Up \u0026 Running, by Brendan Burns, Joe Beda and Kelsey Hightower. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:0:4","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"CKA I will start with the CKA, as it is the first exam I attempted. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:1:0","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"Objectives The CKA ensures we have the skillset to setup and maintain a Kubernetes cluster, and manage it by using best practices. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:1:1","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"Requirements As this exam is aimed at the Systems administrator/devops engineer, some linux as well as infrastructure skills are expected, such as: Knowledge of Linux OS. Being comfortable on the terminal. Knowing how to quickly edit files with text editors like Vi/Vim. Working knowledge of networking concepts. Working knowledge of TLS encryption concepts. Working knowledge of docker and containerization concepts. A deep dive is done on Kubernetes concepts and architecture during the indicated courses. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:1:2","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"Study plan I began studying around the end of September 2020, by purchasing Mumshad Mannambeth‚Äôs excellent Udemy course for both CKA and CKAD, both on sale at the time. That was a major source of material for me, as the courses included access to Katacoda/Kodekloud practice labs, and access to a Slack community where the trainer and other exam-takers participated. The videos of Mumshad‚Äôs course are very well done, each in the 5-10 minute range in length, slowly and clearly explaining each concept. I would get to practice that concept later with labs provided by Mumshad‚Äôs platform, KodeKloud. The course itself has a section later on where we must manually install a Kubernetes cluster from scratch on a local vagrant setup, based on Kelsey Hightower‚Äôs excellent Kubernetes the Hard way project (the original project leverages infrastructure on Google Cloud instead). During the same course, we get to setup another cluster by using kubeadm, which is part of the exam curriculum. I would say that before taking the exam, I spent an average of about 1 hour every day watching the course videos and playing around with the labs (around 2 hours or more during weekends), for a couple months; I took care of understanding every concept presented in the videos, and verified my knowledge with the labs and on a local cluster where I spent some practice time on, on top of study time. I also re-did all of the course labs multiple times until I knew almost all of the answers by heart, and could get around them easily. When something was unclear, the slack communities on kodekloud and kubernetes were always very helpful, always answering all of my questions, no matter how dumb I thought they were :) I made sure to know kubectl imperative commands like the back of my hand, and building a library of bookmarks in my browser with relevant pages ready, as we are allowed an extra tab with the documentation during the exam. After 2 months of that, I felt like I was ready. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:1:3","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"CKA Exam attempt #1 I booked the exam for end of November, on a Saturday morning at 8AM, and sat for it in the guest room of my home. The exam setup time with the proctor went pretty smoothly, and I was able to start on time. I was not so confident by the end of the two hours. After 36 hours I got the news that I failed that attempt with 60% (minimum passing grade is 66%). What went wrong for me was that I did not read/understand one specific question, which was related to ETCD backup and restore (part of the official curriculum); because of this, I ended up performing a task that effectively made one of the exam clusters unavailable. Looking back, I am quite sure I invalidated several correct answers due to this mistake, which resulted in the score. The method of how to backup/restore an ETCD cluster was also not entirely clear to me at the time, so I was not 100% sure of what I was doing. Clearly I overestimated my knowledge, and depended too much on memorizing certain commands on one study platform, instead of being completely confident in all concepts and commands applied. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:1:4","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"New study plan Enter killer.sh. A CKA/CKAD/CKS exam simulator created by Kim Wuestkampf. For CKA, the simulator offered 25 HARD questions to be done in 2 hours, with guided and comprehensive answers made available after the alotted time. Such answers also offered different ways to do things, for maximized learning experience. This alternative platform helped a lot in understanding things that weren‚Äôt clear to me, and to practice more varied scenarios. Completing a killer.sh simulator in under two hours gives good confidence in being able to tackle the real exam. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:1:5","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"CKA Exam attempt #2 I booked the exam one week after getting the results of the previous one. The exam setup experience was again pretty smooth and I was up and ready to go 10 minutes before the start time. I felt pretty confident the whole time and finished up all of the questions around 1 hour and 10 minutes later. The results came around 36 hours after the end of the exam, in an email. Score was a pass with 85% :)! As it is not possible to see the actual answers, to this day I don‚Äôt really don‚Äôt know what I got wrong, but am still satisfied with the result. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:1:6","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"CKAD I took the CKAD exam while the knowledge of the previous training was still fresh, so I felt like I had an easier time with this one. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:2:0","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"Objectives To be able to efficiently design and implement working kubernetes production workloads. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:2:1","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"Requirements Not so much system administration knowledge, but more focus on k8s concepts, architecture and best practices. Actual programming experience is not required for the exam (although in ‚Äúreal life‚Äù it will probably not hurt either ;) ). ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:2:2","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"Study plan I booked the CKAD exam roughly for 3 weeks after passing the CKA. In those 3 weeks, I took my time and spent again around 30min to 1 hour a day on Mumshad‚Äôs course and labs. When exam time was closer, I booked two sessions on killer.sh and focused on practicing there. I challenged myself by finishing all the questions under 2 hours, and afterwards going through slowly through the answers section on the site. This was very helpful and allowed me to learn different, more effective approaches. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:2:3","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"CKAD Exam attempt #1 I once again took the exam from the guest room in my home. This time the exam setup with the proctor wasn‚Äôt so smooth. The connection from my end and theirs wasn‚Äôt great, and we kept getting disconnected from the session. Webcam images weren‚Äôt so clear so they had to ask me to show identification more than once. It took about 40 minutes to start the actual exam, and that did get me a bit stressed out. Nevertheless, I felt comfortable and finished all the questions in about 1 hour and a half. 36 hours later, I got the email with the good news of a pass with 83%. Doing the CKA before really helped with the whole experience. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:2:4","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"Conclusion From my experience, I would say that the hardest exam was the one for CKA, as it didn‚Äôt just go through the new knowledge of k8s concepts, but also on existing understanding of systems administration. I felt like doing CKAD immediately afterwards made it a bit easier, as the knowledge was still fresh. The CKAD questions however were much more time consuming, in the sense that one task would require to perform several smaller tasks quickly, building a workload and making sure everything works together. All in all, I feel the time trying to tackle these certifications was well spent; since the exams are performance based, they are fair in what they expect from you, and ensure that once the certs are in your hands, you really actually know your stuff. :) Next on my list is the new Certified Kubernets Security Specialist certfication, for which I will follow a similar approach as the above. Perhaps a blog post focusing on that will come soon. ","date":"2021-01-24","objectID":"/2021-01-24-cka-ckad/:3:0","tags":["experience","devops","cloud","kubernetes","cncf"],"title":"My experience passing CKA and CKAD","uri":"/2021-01-24-cka-ckad/"},{"categories":null,"content":"experiences","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"The problem I set out to solve was simply to avoid manually typing pyenv/venv commands when moving into directories containing different projects, and around my directory tree. If you are like me, you would be working on different things at different times, and switching projects around seamlessly becomes a requirement to avoid waste of time, attention and context. ","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/:0:0","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"My environment For the sake of clarity, I am using a Macbook Pro with macOS Mojave, and I have iTerm2 set up with ZSH and oh-my-zsh as my shell. ","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/:0:1","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"Virtualenvwrapper Essentially I opted to use virtualenvwrapper instead of pyenv, which I had been using for a few months before. This nifty library contains a feature called workon, that allows one, among other things, to activate separate Python environments. From the virtualenvwrapper‚Äôs docs: ","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/:1:0","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"Install with Pip virtualenvwrapper should be installed into the same global site-packages area where virtualenv is installed. You may need administrative privileges to do that. The easiest way to install it is using pip: $ pip install virtualenvwrapper ","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/:1:1","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"Shell Startup File Add three lines to your shell startup file (.zshrc, .bashrc, .profile, etc.) to set the location where the virtual environments should live, the location of your development project directories, and the location of the script installed with this package: export WORKON_HOME=$HOME/.virtualenvs export PROJECT_HOME=$HOME/Devel source /usr/local/bin/virtualenvwrapper.sh ","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/:1:2","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"Manage your virtualenvs Also from the docs, here is a quick list of commands to get started with workon: workon A list of environments, empty, is printed. mkvirtualenv temp A new environment, temp is created and activated. It copies the current version of python to make it. workon This time, the temp environment is included. workon temp Activates that environment deactivate Deactivates that same environment Now that we have an easy way to separate and use our virtual environments, let‚Äôs talk about Jump! ","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/:1:3","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"Jump Jump is a shell integration which uses fuzzy search to help you move around your directory structure more easily. It is a Go application that essentially records your keystrokes and your most used directories into its own database. Jump allows you to do stuff like this: ","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/:2:0","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"Installing Jump: On Mac: brew install jump After which, you need to add the following line in your zshrc eval \"$(jump shell)\" When you first use Jump it won‚Äôt do much, as its database is empty; it will learn as you use it. An alternative to jump, in case you don‚Äôt want to install Go stuff on your machine (why?), is z, which is entirely written in shell script. ","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/:2:1","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"Moving around seemlessly between projects Now you can jump anywhere in your directory tree, and switch virtual environments as your heart desires. But how do we make the experience even more seamless? We can hack our bashrc / zshrc file by adding a snippet of bash, which will run every time we cd into a new directory, checking the presence of a .venv file. Said .venv file will simply contain the name of the virtual environment we wish to activate. echo \"fooenv\" \u003e\u003e .venv We then need to modify our zshrc and add this (admittedly hacky) snippet: # Workon # Support for bash PROMPT_COMMAND='prompt' # Mirrored support for zsh. precmd() { eval \"$PROMPT_COMMAND\" } function prompt() { # Check for directory change if [ \"$PWD\" != \"$MYOLDPWD\" ]; then MYOLDPWD=\"$PWD\" # Run workon if .venv exists if [[ -e .venv ]]; then workon `cat .venv` # Run deactivate and redirect any errors to null elif [[ ! -e .venv ]]; then deactivate 2\u003e/dev/null fi fi } Alternatively to the above ugly bash hack, we can simply use the ZSH Plugin for virtualenvwrapper, which does pretty much the same thing, but better. :) Also with the plugin, Python environments with the same name as the repository will be automatically activated on cd, unless we use the .venv method as described. After we source our rc file (or close and reopen our terminal), We can jump around like this: The inspiration for this article comes from this blog post ","date":"2019-09-22","objectID":"/2019-09-22-zsh-jump-workon/:3:0","tags":["development","python","zsh"],"title":"Easy workflow for switching Python virtual environments","uri":"/2019-09-22-zsh-jump-workon/"},{"categories":null,"content":"I started learning Go on and off out of curiosity, late last year. Being mainly a Python developer, I figured learning a different programming language would help to broaden my horizons. Recently though, we adopted the language for some work projects, therefore I took the plunge and got to really hacking around with it. The following are some noobie gotchas that I bumped into during development of my latest project (link below). Mostly these came around while trying to figure out how to use mocks and asserts in unit tests with the testify collection of packages. ","date":"2019-05-08","objectID":"/2019-05-08-go-pitfalls/:0:0","tags":["go","junior"],"title":"Pitfalls I encountered while learning Go","uri":"/2019-05-08-go-pitfalls/"},{"categories":null,"content":"Validate if an interface is satisfied by a struct Here is the first snippet: package requests import ( \"github.com/stretchr/testify/mock\" \"net/http\" ) // ClientInterface defines a common interface to // *http.Client and our *MockClient type ClientInterface interface { Do(req *http.Request) (*http.Response, error) } // Validate satisfaction of interface var _ ClientInterface = (*MockClient)(nil) var _ ClientInterface = (*http.Client)(nil) // MockClient embeds mock.Mock to reuse its methods type MockClient struct { mock.Mock } // Do is a mock of http.Client's method Do func (mockClient *MockClient) Do(req *http.Request) (*http.Response, error) { args := mockClient.Called(req) return args.Get(0).(*http.Response), args.Error(1) } Zooming into the interesting part: // Validate satisfaction of interface var _ ClientInterface = (*MockClient)(nil) var _ ClientInterface = (*http.Client)(nil) We assign a MockClient nil pointer to an empty var of type ClientInterface. In the second line we do the same, but with an http.Client. This is a fun little trick we use in order to validate whether or not both structs satisfy our ClientInterface. If they don‚Äôt, the program will complain at build time. We will be using our custom interface in the next step. ","date":"2019-05-08","objectID":"/2019-05-08-go-pitfalls/:1:0","tags":["go","junior"],"title":"Pitfalls I encountered while learning Go","uri":"/2019-05-08-go-pitfalls/"},{"categories":null,"content":"Use interfaces instead of structs to pass data around A key function of my app is the following: import \"net/http\" // GetResponse gets a response func GetResponse(req *http.Request, c *http.Client) { resp, err := c.Do(req) if err != nil { fmt.Println(err) } defer resp.Body.Close() body, _ := ioutil.ReadAll(resp.Body) fmt.Println(body) } I wanted to write tests for this, which would verify its functionality. I also did not wish to test this against a live environment, since unit tests should be isolated, so I had to create my own mock version of *http.Client, and use it as an argument to my GetResponse function. It turns out that Go is pretty anal about its types (no real surprise there!). ./requests_test.go:47:28: cannot use mockClient (type *MockClient) as type *http.Client in argument to GetResponse So I resolved instead to pass it my interface, ClientInterface, which implements Do(), as described above. import \"net/http\" // GetResponse gets a response func GetResponse(req *http.Request, c ClientInterface) { resp, err := c.Do(req) if err != nil { fmt.Println(err) } defer resp.Body.Close() body, _ := ioutil.ReadAll(resp.Body) fmt.Println(body) } ","date":"2019-05-08","objectID":"/2019-05-08-go-pitfalls/:2:0","tags":["go","junior"],"title":"Pitfalls I encountered while learning Go","uri":"/2019-05-08-go-pitfalls/"},{"categories":null,"content":"Dereferencing nil pointers is bad At this point, I just wanted to see the test work, so in a hurry I loaded a couple nil pointers into the arguments I needed, as such: // Initialize mock object mockClient := \u0026MockClient{} // Set return value returnValue := (*http.Response)(nil) req := (*http.Request)(nil) // Set expectations mockClient.On(\"Do\", req).Return(returnValue, nil) GetResponse(req, mockClient) This returned a nasty error: panic: runtime error: invalid memory address or nil pointer dereference [signal SIGSEGV: segmentation violation code=0xffffffff addr=0x0 pc=0x3a6626] Dereferencing means reading the memory value at a given address. So when we have a pointer to something, to dereference the pointer means to read or write the data that the pointer points to. If that pointer points to nothing we will get the above error. Time to fix that by creating a request object with some dummy content. func main() { // Initialize mock object mockClient := \u0026MockClient{} // Set return value body := ioutil.NopCloser(strings.NewReader(\"hello world\")) returnValue := \u0026http.Response{Status: \"200 OK\", Body: body} req := (*http.Request)(nil) // Set expectations mockClient.On(\"Do\", req).Return(returnValue, nil) GetResponse(req, mockClient) } ","date":"2019-05-08","objectID":"/2019-05-08-go-pitfalls/:3:0","tags":["go","junior"],"title":"Pitfalls I encountered while learning Go","uri":"/2019-05-08-go-pitfalls/"},{"categories":null,"content":"Parametrize tests with a struct Finally, I parametrized different calls by using a struct, like described in the official docs. // A struct for testing the different calls var responseTests = []struct { method string endpoint string auth string requestBody string responseBody string }{ {\"POST\", TokenEndPoint, authString, OauthTokenBody, tokenEndpointResponse}, {\"POST\", ContactEndpoint, bearerToken, CreateContactBody, contactEndpointResponse}, {\"GET\", checkEndpoint, bearerToken, \"\", checkEndpointResponse}, {\"POST\", DomainEndpoint, bearerToken, buyDomainBody, buyDomainEndpointResponse}, } func TestGetResponse(t *testing.T) { assert := assert.New(t) // Initialize mock object mockClient := \u0026MockClient{} for _, rt := range responseTests { // Setup request req := SetRequest(rt.method, rt.endpoint, rt.auth, rt.requestBody) // Setup expected response body := ioutil.NopCloser(strings.NewReader(rt.responseBody)) returnValue := \u0026http.Response{Status: \"200 OK\", Body: body} // Set expectations mockClient.On(\"Do\", req).Once().Return(returnValue, nil) // Run the thing! GetResponse(req, mockClient) // Assert expectations mockClient.AssertExpectations(t) } } Looping these this way seems like a much cleaner way to do things, for readbility, and also for being able to add more calls easily if needed. ","date":"2019-05-08","objectID":"/2019-05-08-go-pitfalls/:4:0","tags":["go","junior"],"title":"Pitfalls I encountered while learning Go","uri":"/2019-05-08-go-pitfalls/"},{"categories":null,"content":"To Conclude The above can all be found in my checkdomain project. Go is awesome, and I‚Äôm looking forward to mess around with it more. ","date":"2019-05-08","objectID":"/2019-05-08-go-pitfalls/:5:0","tags":["go","junior"],"title":"Pitfalls I encountered while learning Go","uri":"/2019-05-08-go-pitfalls/"},{"categories":null,"content":"experiences","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"It‚Äôs been an interesting 2018: it was the first year I have coded full-time while getting also paid for it. Before that, I worked mainly as internal IT support for a couple different companies, where my coding skills weren‚Äôt being tested as much as right now. I won‚Äôt lie, the year wasn‚Äôt always easy. I am surrounded by some brilliant people and I have very often felt some sort of inferiority complex that brought me down many a times; I thought that my experience (or lack thereof) was slowing down the team or not allowing us to achieve the goals we were supposed to achieve. Again though, I work with brilliant people! They have helped me out immensely and brought me to the point where I am today; Of course, I do not feel I have a firm grasp of whatever is going on, dog picture But I do feel like maybe I can understand and figure out things with a little bit more confidence than before. The following are a few observations and reflections, on some of the things I have learned/am learning, and have thought about in this time. ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:0","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"1. The more I know, the more I know how much I don‚Äôt know Cliche‚Äô? sure. But it is very, very true. The best devs in my team are just as clueless as I am when facing a new problem, they are just more experienced at figuring it all out. Noone knows everything by heart. I (and many others i‚Äôm sure) still need to google how to create symlinks or tarballs from time to time. ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:1","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"2. Master the fundamentals Pick your programming language of choice, and drill those basic concepts into your brain like there is no tomorrow. Write notes, collection of blog posts, your own wiki, or even your own notebook. Do stupid challenges in your downtime, like finding new ways to write FizzBuzz, or going through examples, exercises. Like a carpenter and his tools, you want to get to a point where these basics are so ingrained in your head that they just come naturally to you. You want to come to a point where you know the internals of python lists or dicts inside and out, and where you would use them and why. And like the carpenter, you want to keep these skills honed and ready all the time. ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:2","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"3. Pair programming is awesome The concept of pair programming was pretty alien to me at first. I didn‚Äôt need to do this in my previous roles, or maybe not quite how it is done in the software development world. Also some social anxiety/awkardness prevented me from embracing this practice fully, at least in the beginning. The gist of it is this: you and a fellow developer sit down at one computer, and you hack together on a problem, thinking out loud and discussing ways to solve it; you take turns ‚Äúdriving‚Äù, or using the keyboard. This can be done face to face but also remotely, with the correct tools; for example, ngrok, tmux, and any voice chat app. Pairing with more experienced developers will allow you to pick their brain and ‚Äúleech‚Äù off of their workflow, learning patterns, details, things to look at, tools. Pairing with less experienced devs is also highly beneficial; their fresh mindset will see things that maybe you don‚Äôt. And there is no better way to learn something than by explaining it to someone else. Overall pair programming is a win for everyone, and you should do more of it! ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:3","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"4. The ‚ÄúSherlock Holmes‚Äù factor I really have no idea how else to call this. So you are sitting next to a senior developer, and you explain to them a problem you have been having. Immediately they go to the part of the code where presumably the problem is happening, and start following the code through imports, checking out inherited properties, overridden attributes, digging and digging to other parts of the code you didn‚Äôt even know existed. Their environment is setup in such a way where it is easy for them to go-to the definitions of any part of the code, being in the same codebase, in third party modules, or in the standard library; they manage to go through to the root of the issue and from there suggest the best way(s) forward. The first time I saw this being done it blew my mind, although admittedly, the developer in question was doing this so fast that I could barely keep up with his train of thought. In any case, they didn‚Äôt have the solution to my problem straight off the top of their head, but they had the experience, the mindset and the tools to figure it out there and then. This skill is one of the most important I have seen and what defines to me a great developer from a good one; It is also one I have been trying to incorporate into my workflow more and more. This also brings me to the next couple points: ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:4","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"5. Read the docs Don‚Äôt skim through the examples and be like, ‚ÄúI got this, let me hack on it, I‚Äôll figure it out eventually‚Äù. You will spend the next 6 hours getting nowhere, just to, as a last resort, more attentively read that line in the docs you skimmed through‚Ä¶. and find there the answer to your question (true story). These days documentation for your programming language, framework, API or what have you, is really well written. And if it‚Äôs not, maybe you can be a good open source citizen and help out by submitting your own PR with better docs :) Luckily you can do something about having docs for whatever language you are using, easily accessible to you and perhaps hooked up to your IDE. As an example, I make heavy use of the excellent Dash; I can choose which docsets to have available, and anytime I can highlight a word, press a shortcut and it will take me to the docs for that particular term. But yeah, just read the effin‚Äô docs :) ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:5","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"6. Setup an efficient dev environment As described above, a good developer has easy access to docs, definitions, most times at the click of a button or shortcut. Code snippets, auto-completion, goto definitions are all features you want to have easy access to. These can be summarised in a good IDE. There are many of these out there, both paid and open-source; you should pick one and stick with it for a month or two, learn it inside and out to make your workflow as fast and efficient as possible. Other things you could do is setup keyboard shortcuts for your git flow, write aliases for those long commands you are typing into your terminal 50 times per day. Anything to make your development environment an extension of your brain. ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:6","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"7. Have side projects Well, the best way to get better at coding is reading and writing code; So then, build something cool! Document it, share it, break it and fix it again. Even if it is a very old project, make it continuosly better. You can write tests for it, adapt it to the latest version of your preferred programming language, or maybe write it for other programming languages. There‚Äôs the carpenter analogy in here again, you need to keep your tools honed and sharpened. The best is to do so doing something you really enjoy :) ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:7","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"8. Keep up with what‚Äôs going on You need to be in the know of what is going on, both in your team, and in general. Don‚Äôt close yourself in your bubble; it might seem like your cozy and safe space but it is actually very limiting for your own progress. Get your company to send you to some of those fancy conferences; once there, take notes, talk to people, build your network. If you can‚Äôt go to conferences for whatever constraint, very very often conference talks are available online for you to watch in the following days. Really take the time to sit through some of those and absorb ideas, concepts and news. Listen to podcasts, have a twitter feed, or check out hacker news or ars technica or something. The tech world is changing all the time, and you need to keep up to date or be left behind. ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:8","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"9. Ask questions No questions are dumb, just ask them; At the same time however, you need to know to ask the right questions. What does that even mean? Well, if there is something you don‚Äôt know, you should first research the matter on your own, make sure you read the fucking docs (see point 5), and have a clear idea of what it is you are trying to do. Then and only then you should ask. So ask questions, but also don‚Äôt waste yours or anyone else‚Äôs time. ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:9","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"10. Share the knowledge Well, I have, this year, attended several events, where knowledge was shared: Local meetups, conferences, webinars, you name it. I am astounded by the quality talks some people can give on topics they are passionate about! Giving talks and writing blog posts is a great way to learn more about a certain topic. Not only that, they give you exposure and may be your gateway to find the next step in your career. In some cases also, you end up helping out someone in need, sometimes months after you published your talk/blog post. ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:10","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"Conclusion I have the feeling I have barely scratched the surface, but feel like I had a very productive first year. I plan to continue on this course, and hopefully add to this article at the end of my second year as a software developer. :) confused ","date":"2019-02-11","objectID":"/2019-02-11-things-i-learned-first-year-dev/:0:11","tags":["meta"],"title":"Things I learned during my first year as a Junior Developer","uri":"/2019-02-11-things-i-learned-first-year-dev/"},{"categories":null,"content":"For my development workflow and IDE, I‚Äôve recently decided to move from Vim, to NeoVim, which is essentially Vim on steroids. No, but seriously, NeoVim has a few features that are really interesting, but the real reason for moving is that, as a Python dev, I need to be able to look at source code and definitions very often, while hacking on my code. The wonderful jedi-vim plugin normally allows me to do just that, when it comes to my local project. But because I am using virtual environments extensively in my work, such as with virtualenv and/or pyenv, I have a problem on my hands: Jedi-vim is painfully unaware of virtual environments. So if I for example, setup a virtual environments in my project dir as such: $ virtualenv -m python 3 venv Activate the environment: $ source venv/bin/activate and then install Django: $ pip install django Initialise a django app with: $ django-admin startproject mysite Open the urls file: $ vim mysite/urls.py Placing the cursor on an object we are importing, such as url, and running the jedi-vim goto definition shortcut (mine is ,d): from django.conf.urls import url from django.contrib import admin Returns the following error: jedi-vim: Couldn't find any definitions for this. Which sucks. Spent a good amount of time googling, asking around, playing with different plugins, but nope, no joy. The internet was suggesting three things: Suck it up, cause similar issues were not tackled yet or at all.. Tackle the issue myself, for which I feel I am not well versed enough (yet). Move to NeoVim plus Pyenv and jedi-vim, where things magically work. So here I am with my brand new NeoVim setup. Of course I had to go through a few gotchas to get this to work, which I will share here for all those out there hacking around with this. ","date":"2018-04-16","objectID":"/2018-04-16-pyenv-neovim/:0:0","tags":["python","environment"],"title":"Making pyenv and neovim play nice (and a few gotchas found along the way)","uri":"/2018-04-16-pyenv-neovim/"},{"categories":null,"content":"Installing Pyenv The first thing I did was to ditch virtualenv and use Pyenv instead. I used homebrew to do that. $ brew update $ brew install pyenv $ brew install pyenv-virtualenv We still need to complete the install by adding a few environment variables to our shell profiles. So depending on our preferred shell, we use ~/.bash_profile , or ~/.zshrc or whatever else: $ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' \u003e\u003e \u003cprofile_file\u003e $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' \u003e\u003e \u003cprofile_file\u003e $ echo -e 'if command -v pyenv 1\u003e/dev/null 2\u003e\u00261; then\\n eval \"$(pyenv init -)\"\\nfi' \u003e\u003e \u003cprofile_file\u003e (more info on PyEnv Github) We can then initialize some environments and play around: $ pyenv install 3.6.5 $ pyenv install 2.7.14 $ pyenv virtualenv 2.7.14 my_p2_project $ pyenv virtualenv 3.6.5 my_p3_project $ pyenv activate my_p3_project $ pyenv versions $ pyenv deactivate ","date":"2018-04-16","objectID":"/2018-04-16-pyenv-neovim/:1:0","tags":["python","environment"],"title":"Making pyenv and neovim play nice (and a few gotchas found along the way)","uri":"/2018-04-16-pyenv-neovim/"},{"categories":null,"content":"Installing NeoVim and jedi-vim For NeoVim, I used, you guess it, Homebrew: $ brew install neovim At which point, we can run it with: $ nvim I then proceeded to install a bunch of plugins for my Python stuff. I took a great deal of inspiration from Fisa‚Äôs NeoVim configuration for that, but for the sake of this guide, we can simply install the jedi-vim plugin by adding the following to our ~/.config/nvim/init.vim : call plug#begin('~/.config/nvim/plugged') Plug 'davidhalter/jedi-vim call plug#end() We can then reopen nvim and run a :PlugInstall ","date":"2018-04-16","objectID":"/2018-04-16-pyenv-neovim/:2:0","tags":["python","environment"],"title":"Making pyenv and neovim play nice (and a few gotchas found along the way)","uri":"/2018-04-16-pyenv-neovim/"},{"categories":null,"content":"Now for our gotcha part For being able to use Python 2/3 plugins,we will need the neovim Python module, with: pip install neovim But this would mean that we‚Äôd have to install the neovim plugin in all the virtual environments we create. To get around this, we need to create 1-2 virtual environments just for neovim, and add a line in our init.vim that will tell nvim to look into those envs for its plugin. We do the following: pyenv virtualenv 2.7.14 neovim2 pyenv virtualenv 3.6.5 neovim3 pyenv activate neovim2 pip install neovim pyenv which python # Note the path pyenv activate neovim3 pip install neovim pyenv which python # Note the path We will need to add also the following to our ~/.config/nvim/init.vim: let g:python_host_prog = '/path/to/neovim2/bin/python' let g:python3_host_prog = '/path/to/neovim3/bin/python' Run a health check in nvim to make sure all is ok: :CheckHealth Once this is done, we are all set with a reachable pyenv environment in our shiny new neovim setup! ","date":"2018-04-16","objectID":"/2018-04-16-pyenv-neovim/:3:0","tags":["python","environment"],"title":"Making pyenv and neovim play nice (and a few gotchas found along the way)","uri":"/2018-04-16-pyenv-neovim/"}]